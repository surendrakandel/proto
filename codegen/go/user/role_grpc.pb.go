// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleClient interface {
	// create request to apply current user as Business owner. Business can have only one owner
	ApplyBusinessOwner(ctx context.Context, in *ApplyBusinessOwnerRequest, opts ...grpc.CallOption) (*ApplyBusinessOwnerResponse, error)
	VerifyBusinessOwner(ctx context.Context, in *VerifyBusinessOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// only owner can set admins (up to 50)
	AddBusinessAdmin(ctx context.Context, in *AddBusinessAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBusinessAdmin(ctx context.Context, in *RemoveBusinessAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// company owner can move self owner-role to another user. this action is irreversible
	SetCompanyOwner(ctx context.Context, in *SetBusinessOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetManagers(ctx context.Context, in *GetManagersRequest, opts ...grpc.CallOption) (*GetManagersResponse, error)
	CanEditBusiness(ctx context.Context, in *CanEditBusinessRequest, opts ...grpc.CallOption) (*CanEditBusinessResponse, error)
	// where current user is owner or admin
	GetOwnBusinesses(ctx context.Context, in *GetOwnBusinessesRequest, opts ...grpc.CallOption) (*GetOwnBusinessesResponse, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) ApplyBusinessOwner(ctx context.Context, in *ApplyBusinessOwnerRequest, opts ...grpc.CallOption) (*ApplyBusinessOwnerResponse, error) {
	out := new(ApplyBusinessOwnerResponse)
	err := c.cc.Invoke(ctx, "/user.Role/ApplyBusinessOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) VerifyBusinessOwner(ctx context.Context, in *VerifyBusinessOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/VerifyBusinessOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) AddBusinessAdmin(ctx context.Context, in *AddBusinessAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/AddBusinessAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RemoveBusinessAdmin(ctx context.Context, in *RemoveBusinessAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/RemoveBusinessAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) SetCompanyOwner(ctx context.Context, in *SetBusinessOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/SetCompanyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetManagers(ctx context.Context, in *GetManagersRequest, opts ...grpc.CallOption) (*GetManagersResponse, error) {
	out := new(GetManagersResponse)
	err := c.cc.Invoke(ctx, "/user.Role/GetManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) CanEditBusiness(ctx context.Context, in *CanEditBusinessRequest, opts ...grpc.CallOption) (*CanEditBusinessResponse, error) {
	out := new(CanEditBusinessResponse)
	err := c.cc.Invoke(ctx, "/user.Role/CanEditBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetOwnBusinesses(ctx context.Context, in *GetOwnBusinessesRequest, opts ...grpc.CallOption) (*GetOwnBusinessesResponse, error) {
	out := new(GetOwnBusinessesResponse)
	err := c.cc.Invoke(ctx, "/user.Role/GetOwnBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
// All implementations must embed UnimplementedRoleServer
// for forward compatibility
type RoleServer interface {
	// create request to apply current user as Business owner. Business can have only one owner
	ApplyBusinessOwner(context.Context, *ApplyBusinessOwnerRequest) (*ApplyBusinessOwnerResponse, error)
	VerifyBusinessOwner(context.Context, *VerifyBusinessOwnerRequest) (*emptypb.Empty, error)
	// only owner can set admins (up to 50)
	AddBusinessAdmin(context.Context, *AddBusinessAdminRequest) (*emptypb.Empty, error)
	RemoveBusinessAdmin(context.Context, *RemoveBusinessAdminRequest) (*emptypb.Empty, error)
	// company owner can move self owner-role to another user. this action is irreversible
	SetCompanyOwner(context.Context, *SetBusinessOwnerRequest) (*emptypb.Empty, error)
	GetManagers(context.Context, *GetManagersRequest) (*GetManagersResponse, error)
	CanEditBusiness(context.Context, *CanEditBusinessRequest) (*CanEditBusinessResponse, error)
	// where current user is owner or admin
	GetOwnBusinesses(context.Context, *GetOwnBusinessesRequest) (*GetOwnBusinessesResponse, error)
	mustEmbedUnimplementedRoleServer()
}

// UnimplementedRoleServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServer struct {
}

func (UnimplementedRoleServer) ApplyBusinessOwner(context.Context, *ApplyBusinessOwnerRequest) (*ApplyBusinessOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyBusinessOwner not implemented")
}
func (UnimplementedRoleServer) VerifyBusinessOwner(context.Context, *VerifyBusinessOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBusinessOwner not implemented")
}
func (UnimplementedRoleServer) AddBusinessAdmin(context.Context, *AddBusinessAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessAdmin not implemented")
}
func (UnimplementedRoleServer) RemoveBusinessAdmin(context.Context, *RemoveBusinessAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBusinessAdmin not implemented")
}
func (UnimplementedRoleServer) SetCompanyOwner(context.Context, *SetBusinessOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyOwner not implemented")
}
func (UnimplementedRoleServer) GetManagers(context.Context, *GetManagersRequest) (*GetManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagers not implemented")
}
func (UnimplementedRoleServer) CanEditBusiness(context.Context, *CanEditBusinessRequest) (*CanEditBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanEditBusiness not implemented")
}
func (UnimplementedRoleServer) GetOwnBusinesses(context.Context, *GetOwnBusinessesRequest) (*GetOwnBusinessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnBusinesses not implemented")
}
func (UnimplementedRoleServer) mustEmbedUnimplementedRoleServer() {}

// UnsafeRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServer will
// result in compilation errors.
type UnsafeRoleServer interface {
	mustEmbedUnimplementedRoleServer()
}

func RegisterRoleServer(s grpc.ServiceRegistrar, srv RoleServer) {
	s.RegisterService(&Role_ServiceDesc, srv)
}

func _Role_ApplyBusinessOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyBusinessOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).ApplyBusinessOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/ApplyBusinessOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).ApplyBusinessOwner(ctx, req.(*ApplyBusinessOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_VerifyBusinessOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBusinessOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).VerifyBusinessOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/VerifyBusinessOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).VerifyBusinessOwner(ctx, req.(*VerifyBusinessOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_AddBusinessAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).AddBusinessAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/AddBusinessAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).AddBusinessAdmin(ctx, req.(*AddBusinessAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RemoveBusinessAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBusinessAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RemoveBusinessAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/RemoveBusinessAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RemoveBusinessAdmin(ctx, req.(*RemoveBusinessAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_SetCompanyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBusinessOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).SetCompanyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/SetCompanyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).SetCompanyOwner(ctx, req.(*SetBusinessOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/GetManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetManagers(ctx, req.(*GetManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_CanEditBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanEditBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).CanEditBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/CanEditBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).CanEditBusiness(ctx, req.(*CanEditBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetOwnBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnBusinessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetOwnBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/GetOwnBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetOwnBusinesses(ctx, req.(*GetOwnBusinessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Role_ServiceDesc is the grpc.ServiceDesc for Role service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Role_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyBusinessOwner",
			Handler:    _Role_ApplyBusinessOwner_Handler,
		},
		{
			MethodName: "VerifyBusinessOwner",
			Handler:    _Role_VerifyBusinessOwner_Handler,
		},
		{
			MethodName: "AddBusinessAdmin",
			Handler:    _Role_AddBusinessAdmin_Handler,
		},
		{
			MethodName: "RemoveBusinessAdmin",
			Handler:    _Role_RemoveBusinessAdmin_Handler,
		},
		{
			MethodName: "SetCompanyOwner",
			Handler:    _Role_SetCompanyOwner_Handler,
		},
		{
			MethodName: "GetManagers",
			Handler:    _Role_GetManagers_Handler,
		},
		{
			MethodName: "CanEditBusiness",
			Handler:    _Role_CanEditBusiness_Handler,
		},
		{
			MethodName: "GetOwnBusinesses",
			Handler:    _Role_GetOwnBusinesses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/role.proto",
}
