// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/business.proto

package business

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetOwnBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOwnBusinessesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetOpts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOwnBusinessesRequestValidationError{
				field:  "Opts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOwnBusinessesRequestValidationError is the validation error returned by
// GetOwnBusinessesRequest.Validate if the designated constraints aren't met.
type GetOwnBusinessesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnBusinessesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnBusinessesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnBusinessesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnBusinessesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnBusinessesRequestValidationError) ErrorName() string {
	return "GetOwnBusinessesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnBusinessesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnBusinessesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnBusinessesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnBusinessesRequestValidationError{}

// Validate checks the field values on GetOwnBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOwnBusinessesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOwnBusinessesResponseValidationError is the validation error returned by
// GetOwnBusinessesResponse.Validate if the designated constraints aren't met.
type GetOwnBusinessesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnBusinessesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnBusinessesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnBusinessesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnBusinessesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnBusinessesResponseValidationError) ErrorName() string {
	return "GetOwnBusinessesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnBusinessesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnBusinessesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnBusinessesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnBusinessesResponseValidationError{}

// Validate checks the field values on GetManagersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetManagersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	if v, ok := interface{}(m.GetOpts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetManagersRequestValidationError{
				field:  "Opts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetManagersRequestValidationError is the validation error returned by
// GetManagersRequest.Validate if the designated constraints aren't met.
type GetManagersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagersRequestValidationError) ErrorName() string {
	return "GetManagersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagersRequestValidationError{}

// Validate checks the field values on ManagerItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ManagerItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for MidddleName

	// no validation rules for LastName

	// no validation rules for Photo

	return nil
}

// ManagerItemValidationError is the validation error returned by
// ManagerItem.Validate if the designated constraints aren't met.
type ManagerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagerItemValidationError) ErrorName() string { return "ManagerItemValidationError" }

// Error satisfies the builtin error interface
func (e ManagerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagerItemValidationError{}

// Validate checks the field values on GetManagersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetManagersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetManagers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetManagersResponseValidationError{
					field:  fmt.Sprintf("Managers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetManagersResponseValidationError is the validation error returned by
// GetManagersResponse.Validate if the designated constraints aren't met.
type GetManagersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagersResponseValidationError) ErrorName() string {
	return "GetManagersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagersResponseValidationError{}

// Validate checks the field values on CanEditBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanEditBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for UserId

	return nil
}

// CanEditBusinessRequestValidationError is the validation error returned by
// CanEditBusinessRequest.Validate if the designated constraints aren't met.
type CanEditBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanEditBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanEditBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanEditBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanEditBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanEditBusinessRequestValidationError) ErrorName() string {
	return "CanEditBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CanEditBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanEditBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanEditBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanEditBusinessRequestValidationError{}

// Validate checks the field values on CanEditBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanEditBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CanEdit

	return nil
}

// CanEditBusinessResponseValidationError is the validation error returned by
// CanEditBusinessResponse.Validate if the designated constraints aren't met.
type CanEditBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanEditBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanEditBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanEditBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanEditBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanEditBusinessResponseValidationError) ErrorName() string {
	return "CanEditBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CanEditBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanEditBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanEditBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanEditBusinessResponseValidationError{}

// Validate checks the field values on AddBusinessAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddBusinessAdminRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for UserId

	return nil
}

// AddBusinessAdminRequestValidationError is the validation error returned by
// AddBusinessAdminRequest.Validate if the designated constraints aren't met.
type AddBusinessAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBusinessAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBusinessAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBusinessAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBusinessAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBusinessAdminRequestValidationError) ErrorName() string {
	return "AddBusinessAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBusinessAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBusinessAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBusinessAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBusinessAdminRequestValidationError{}

// Validate checks the field values on RemoveBusinessAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveBusinessAdminRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for UserId

	return nil
}

// RemoveBusinessAdminRequestValidationError is the validation error returned
// by RemoveBusinessAdminRequest.Validate if the designated constraints aren't met.
type RemoveBusinessAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBusinessAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBusinessAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBusinessAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBusinessAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBusinessAdminRequestValidationError) ErrorName() string {
	return "RemoveBusinessAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBusinessAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBusinessAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBusinessAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBusinessAdminRequestValidationError{}

// Validate checks the field values on SetBusinessOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetBusinessOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for UserId

	return nil
}

// SetBusinessOwnerRequestValidationError is the validation error returned by
// SetBusinessOwnerRequest.Validate if the designated constraints aren't met.
type SetBusinessOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetBusinessOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetBusinessOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetBusinessOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetBusinessOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetBusinessOwnerRequestValidationError) ErrorName() string {
	return "SetBusinessOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetBusinessOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetBusinessOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetBusinessOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetBusinessOwnerRequestValidationError{}

// Validate checks the field values on ApplyBusinessOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplyBusinessOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	return nil
}

// ApplyBusinessOwnerRequestValidationError is the validation error returned by
// ApplyBusinessOwnerRequest.Validate if the designated constraints aren't met.
type ApplyBusinessOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyBusinessOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyBusinessOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyBusinessOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyBusinessOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyBusinessOwnerRequestValidationError) ErrorName() string {
	return "ApplyBusinessOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyBusinessOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyBusinessOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyBusinessOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyBusinessOwnerRequestValidationError{}

// Validate checks the field values on VerifyBusinessOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyBusinessOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	return nil
}

// VerifyBusinessOwnerRequestValidationError is the validation error returned
// by VerifyBusinessOwnerRequest.Validate if the designated constraints aren't met.
type VerifyBusinessOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyBusinessOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyBusinessOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyBusinessOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyBusinessOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyBusinessOwnerRequestValidationError) ErrorName() string {
	return "VerifyBusinessOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyBusinessOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyBusinessOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyBusinessOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyBusinessOwnerRequestValidationError{}

// Validate checks the field values on ApplyBusinessOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplyBusinessOwnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetaName

	// no validation rules for MetaContent

	return nil
}

// ApplyBusinessOwnerResponseValidationError is the validation error returned
// by ApplyBusinessOwnerResponse.Validate if the designated constraints aren't met.
type ApplyBusinessOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyBusinessOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyBusinessOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyBusinessOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyBusinessOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyBusinessOwnerResponseValidationError) ErrorName() string {
	return "ApplyBusinessOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyBusinessOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyBusinessOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyBusinessOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyBusinessOwnerResponseValidationError{}

// Validate checks the field values on SetBusinessAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetBusinessAdminRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for UserId

	return nil
}

// SetBusinessAdminRequestValidationError is the validation error returned by
// SetBusinessAdminRequest.Validate if the designated constraints aren't met.
type SetBusinessAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetBusinessAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetBusinessAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetBusinessAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetBusinessAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetBusinessAdminRequestValidationError) ErrorName() string {
	return "SetBusinessAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetBusinessAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetBusinessAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetBusinessAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetBusinessAdminRequestValidationError{}
