// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SayHi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SayHi) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hello

	// no validation rules for Success

	return nil
}

// SayHiValidationError is the validation error returned by SayHi.Validate if
// the designated constraints aren't met.
type SayHiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SayHiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SayHiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SayHiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SayHiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SayHiValidationError) ErrorName() string { return "SayHiValidationError" }

// Error satisfies the builtin error interface
func (e SayHiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSayHi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SayHiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SayHiValidationError{}

// Validate checks the field values on SignUpUserData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignUpUserData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	if utf8.RuneCountInString(m.GetUserName()) < 8 {
		return SignUpUserDataValidationError{
			field:  "UserName",
			reason: "value length must be at least 8 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEmail()) < 10 {
		return SignUpUserDataValidationError{
			field:  "Email",
			reason: "value length must be at least 10 runes",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SignUpUserDataValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		return SignUpUserDataValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
	}

	if utf8.RuneCountInString(m.GetConfirmPassword()) < 8 {
		return SignUpUserDataValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be at least 8 runes",
		}
	}

	if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpUserDataValidationError{
				field:  "Roles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	return nil
}

func (m *SignUpUserData) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignUpUserData) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignUpUserDataValidationError is the validation error returned by
// SignUpUserData.Validate if the designated constraints aren't met.
type SignUpUserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpUserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpUserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpUserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpUserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpUserDataValidationError) ErrorName() string { return "SignUpUserDataValidationError" }

// Error satisfies the builtin error interface
func (e SignUpUserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpUserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpUserDataValidationError{}

// Validate checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserAccount) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	if utf8.RuneCountInString(m.GetUserName()) < 8 {
		return UserAccountValidationError{
			field:  "UserName",
			reason: "value length must be at least 8 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEmail()) < 10 {
		return UserAccountValidationError{
			field:  "Email",
			reason: "value length must be at least 10 runes",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return UserAccountValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		return UserAccountValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
	}

	if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "Roles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *UserAccount) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserAccount) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserAccountValidationError is the validation error returned by
// UserAccount.Validate if the designated constraints aren't met.
type UserAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountValidationError) ErrorName() string { return "UserAccountValidationError" }

// Error satisfies the builtin error interface
func (e UserAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountValidationError{}

// Validate checks the field values on SignInRequestData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SignInRequestData) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SignInRequestDataValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		return SignInRequestDataValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
	}

	return nil
}

func (m *SignInRequestData) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignInRequestData) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignInRequestDataValidationError is the validation error returned by
// SignInRequestData.Validate if the designated constraints aren't met.
type SignInRequestDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestDataValidationError) ErrorName() string {
	return "SignInRequestDataValidationError"
}

// Error satisfies the builtin error interface
func (e SignInRequestDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequestData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestDataValidationError{}

// Validate checks the field values on SignInResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignInResponseData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// SignInResponseDataValidationError is the validation error returned by
// SignInResponseData.Validate if the designated constraints aren't met.
type SignInResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInResponseDataValidationError) ErrorName() string {
	return "SignInResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e SignInResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInResponseDataValidationError{}

// Validate checks the field values on SignUpResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignUpResponseData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Success

	return nil
}

// SignUpResponseDataValidationError is the validation error returned by
// SignUpResponseData.Validate if the designated constraints aren't met.
type SignUpResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseDataValidationError) ErrorName() string {
	return "SignUpResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e SignUpResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseDataValidationError{}
